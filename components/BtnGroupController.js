import React, { useState, useEffect, useRef } from 'react';
import styles from '../styles/Controller.module.css';
import BtnController from './BtnController';
import { Select, InputNumber, Button, Space } from 'antd';
import { DownOutlined, DeleteOutlined} from '@ant-design/icons';
// import {Button} from 'react-bootstrap';

const BTNNUM_MAX=50


export default function BtnGroupController(props) {
    /*
        To configure a annotating btn group.
        Props: 
            id: unique id. If not provided, then set up id state.  //Required. //when specify onDelete. To distinguish from other btnGroupController
            defaultGroupType: 'category'/'shape'. Optional. When specified, the btnType dropdown will be generated accordingly; otherwise, use general list.
            defaultBtnType: 'bbox'. Optional. When specified, the default value of the btnType select will be set.
            defaultBtnNum: integer. Optional.
            data: object {id_1: arr_2, ...}. Required. Used with setData. To hold btn data generated by the controller
            setData: function. Required. The setter of data. Use as [data, setData]=useState()
            groupTypePlaceHolder: 'Group type'
            btnTypePlaceHolder: 'Btn type'
            disableGroupTypeSelect: boolean. False by default, true when specified. Whether to disable groupType selcet.
            disableBtnTypeSelect: boolean. False by default, true when specified. Whether to disable btnType select.
            disableBtnNumInput: boolean. False by default, true when specified. Whether to disable btn num input.
            // enableGenerateBtn: boolean. False by defualt, true when specified. Whether to include the generate btn
            enableDelete: boolean. False by default, true when specified. Whether to include the delete btn.
            onGroupTypeChange: Callback when group type select changes
            onBtnTypeChange: Callback when btn type select changes
            onBtnNumChange: Callback when btn num input changes
            onDelete: Callback when delete btn clicked. Takes one argument: target {index: int}
    */
    const [id, setId] = useState();
    const [groupType, setGroupType] = useState();
    const [btnType, setBtnType] = useState();
    const [btnNum, setBtnNum] = useState(0);
    const [children, setChildren] = useState([]);
    // const [childrenData, setChildrenData] = useState([]);
    const prevBtnNumRef = useRef(0);
    const prevBtnTypeRef = useRef();

    console.log('btnGroupController render');

    const btnGroupOptions = [
        {value: 'shape', label: 'Shape'},
        {value: 'category', label: 'Category'},
    ]

    const btnOptions = {
        category: [
            {value: 'category', label: 'Category'}
        ],
        shape: [
            {value: 'keyPoint', label: 'Key Point'},
            {value: 'bbox', label: 'Bounding Box'},
            {value: 'polygon', label: 'Polygon'},
        ],
        general: [
            {value: 'category', label: 'Category'},
            {value: 'keyPoint', label: 'Key Point'},
            {value: 'bbox', label: 'Bounding Box'},
            {value: 'polygon', label: 'Polygon'},
        ]
    }


    useEffect(()=>{
        if (!props.data || !props.setData) {
            throw SyntaxError('Property data and setData are required, cannot be null or undefined');
        }
        if (!props.id) {
            setId(Date.now().toString());
        }
      },[]
    )


    useEffect(() => {
        // to update callback's scope when data changes
        // console.log('useEffect called');
        if (props.data && getId()) { // avoid calling renderChildren when component just mounted
            renderChildren();
        } 
      }, [props.data]
    )


    function onGroupTypeChange(newValue, opt) {
        // console.log(newValue);
        // console.log(btnOptions[newValue]);
        setGroupType(newValue);
        setBtnType(btnOptions[newValue][0]['value']);

        // if user has defined custom callback
        if (props.onGroupTypeChange) {
            const target = {
                id: getId(),
                value: newValue,
                label: opt.label
            };
            props.onGroupTypeChange(target);
        }
    }

    function onBtnTypeChange(newValue, opt) {
        setBtnType(newValue);

        // if user has defined custom callback
        if (props.onBtnTypeChange) {
            const target = {
                id: getId(),
                value: newValue,
                label: opt.label
            };
            props.onBtnTypeChange(target);
        }
    }

    function onBtnNumChange(newValue) {
        if (typeof newValue === 'number' 
        && Number.isInteger(newValue) 
        && newValue>=0 
        && newValue<=BTNNUM_MAX) {
            setBtnNum(newValue);

            // if user has defined custom callback
            if (props.onBtnNumChange) {
                const target = {
                    id: getId(),
                    value: newValue,
                };
                props.onBtnNumChange(target);
            }
        }
    }

    function downBtnClickHandler() {
        const id = getId();
        const childrenData = getData();
        let data = [];
        if (groupType && btnType) {
            if (btnNum > prevBtnNumRef.current) {
                const newData = createChildrenData(prevBtnNumRef.current, btnNum);
                data = [...childrenData, ...newData];
            } else if (btnNum < prevBtnNumRef.current) {
                data = [...props.data].slice(0, btnNum);
            } else {
                if (btnType !== prevBtnTypeRef.current) {
                    data = createChildrenData(0, btnNum);
                }
            }
            props.setData({...props.data, [id]: data});
            prevBtnNumRef.current = btnNum;
            prevBtnTypeRef.current = btnType;
        } else {
            props.setData({...props.data, [id]: []});
        }
    }

    function getData() {
        const id = getId();
        let data = props.data[id];
        if (!data) {
            data=[]
        }
        return data; //arr
    }

    function getId() {
        return props.id ? props.id : id; 
    }

    function createChildrenData(startIndex, endIndex) {
        const newData=[];
        for (let i = startIndex; i < endIndex; i++) {
            const data = {
                index: i,
                groupType: groupType,
                btnType: btnType,
            };
            newData.push(data);
        }
        return newData;
    }


    function renderChildren() {
        console.log('renderChildren called');
        const childrenData = getData();
        let res = [];
        for (let i = 0; i < childrenData.length; i++) {
            res.push(
                <BtnController 
                    key={i}
                    index={i} 
                    // data={childrenData[i]}
                    groupType={childrenData[i].groupType}
                    defaultBtnType={childrenData[i].btnType}
                    defaultcColor={childrenData[i].color}
                    defaultLabel={childrenData[i].label}
                    typeSelectPlaceHolder='Btn type'
                    labelPlaceHolder="Label: e.g. 'mouse'"
                    disableTypeSelect
                    enableDelete
                    // onTypeChange={onChildTypeChange}
                    onLabelChange={onChildLabelChange}
                    onColorChange={onChildColorChange}
                    onDelete={onChildDelete}
                    />); 
        }
        setChildren(res);
    }


    function onDelete() {
        const target = {
            id: getId(),
        }

        if (props.onDelete) {
            props.onDelete(target);
        }
    }

    
    function onChildLabelChange(target) {
        // console.log('parent ',target);
        const id = getId();
        const childrenData = getData();
        const data = {...childrenData[target.index]};
        console.log('label', children[target.index]);
        data.label = target.value;
        // console.log(data);
        const childrenDataCopy = [...childrenData];
        childrenDataCopy[target.index] = data;
        props.setData({...props.data, [id]: childrenDataCopy});
    } 

    function onChildColorChange(target) {
        const id = getId();
        const childrenData = getData();
        const data = {...childrenData[target.index]};
        // console.log('color', childrenData);
        data.color = target.value;
        // console.log(data);
        const childrenDataCopy = [...childrenData];
        childrenDataCopy[target.index] = data;
        props.setData({...props.data, [id]: childrenDataCopy});
    }

    function onChildDelete(target) {
        setBtnNum(btnNum-1);
        prevBtnNumRef.current = prevBtnNumRef.current>0 ? prevBtnNumRef.current-1 : 0;
        const newChildrenData = [...getData()];
        newChildrenData.splice(target.index, 1);
        newChildrenData.forEach((item,i) => {item.index=i});
        props.setData({...props.data, [id]: childrenDataCopy});
    }


    return (
        <div className='my-1'>
            <div className='my-2 d-inline-flex'>
                <Space.Compact block className='px-0'>
                    <Select className={styles.groupSelect}
                        // defaultValue={btnGroupOptions[0].value}
                        defaultValue={props.defaultGroupType}
                        value={groupType}
                        onChange={onGroupTypeChange}
                        options={btnGroupOptions}
                        placeholder={props.groupTypePlaceHolder}
                        disabled={props.disableGroupTypeSelect}
                        />
                    <Select className={styles.btnSelect}
                        defaultValue={props.defaultBtnType}
                        value={btnType}
                        onChange={onBtnTypeChange}
                        options={groupType ? btnOptions[groupType] : btnOptions.general}
                        // placeholder={props.btnTypePlaceHolder}
                        disabled={props.disableBtnTypeSelect}
                        />
                    <InputNumber className={styles.numInput}
                        // className={videoStyles.playFpsInput} 
                        min={0}
                        max={BTNNUM_MAX}
                        defaultValue={props.defualtBtnNum}
                        value={btnNum}
                        onChange={onBtnNumChange}
                        // size="small"
                        disabled={props.disableBtnNumInput}
                        />
                </Space.Compact>

                {/* {props.enableDelete ? */}
                    <Button className={styles.generateBtn} 
                        // shape='circle'
                        type='text'
                        icon={<DownOutlined />}
                        onClick={downBtnClickHandler} 
                        // size='small'
                        />
                    {/* :null
                } */}
                {props.enableDelete ?
                    <Button className={styles.deleteBtn} 
                        // shape='circle'
                        type='text'
                        icon={<DeleteOutlined />} 
                        onClick={onDelete}
                        // size='small'
                        />
                    :null
                }
                
            </div>
            <div className='ms-3'>
                {children ?
                    <Space direction='vertical'>
                        {children}
                    </Space>
                    : null
                }
            </div>
        </div>
    )
}